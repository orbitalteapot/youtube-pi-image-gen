# This is a basic workflow to help you get started with Actions

name: Raspberry-image-Build

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Check Out Repo 
        uses: actions/checkout@v2

      - name: Login to Github Repo
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        env:
          USE_QCOW2: 0
          BASE_QCOW2_SIZE: "12G"
          IMG_NAME: Orbital-Image
          RELEASE: buster
          LOCALE_DEFAULT: en_GB.UTF-8
          TARGET_HOSTNAME: orbitalteapot
          KEYBOARD_KEYMAP: "gb"
          KEYBOARD_LAYOUT: "English (UK)"
          TIMEZONE_DEFAULT: UTC
          FIRST_USER_NAME: yourusername
          FIRST_USER_PASS: supersecretpassword
          WPA_ESSID: yourssid
          WPA_PASSWORD: yourwifipassword
          WPA_COUNTRY: gb
          ENABLE_SSH: 1 # 0 or 1
          PUBKEY_SSH_FIRST_USER: ""
          PUBKEY_ONLY_SSH: 0 # 0 or 1
          STAGE_LIST: stage* # Define stages you want to run
        with:
          context: ./debian
          file: ./debian/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/youtube-pi-image-gen:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
